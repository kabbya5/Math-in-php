<?php
	class StaticSticMatch {
	  private $profits = [];
	  private $frequecy = array();
	  private $mid_point = array();
	  private $cf=[],$profites_fx = [],$value_of_d =[], $value_of_fd =[];
	  private $class_intervel, $total_fd_value, $tatal_frequency, $mid_point_A;
	  private $average_profite, $median_profite, $modal_profite, 
	  $deviation;
	  
	  function __construct(array $profits,array $frequecy){
	    array_push($this->profits,$profits);
	    array_push($this->frequecy,$frequecy);
	    
	    $this->total_frequency = array_sum($frequecy);
	    
	    
	   //class_intervel 
	    $this->class_intervel = $profits[0][1] - $profits[0][0];
	    
	    //profits mid_point 
	   
	    foreach($profits as $key=>$profite){
	      $sum = ($profite[0] + $profite[1]);
	      $mid = $sum/2;
	      array_push($this->mid_point,$mid); 
	    }
	    
	    // calculate Mid Points A;
	     
	    $length_of_profits = count($profits);
	    $mid_point_index = floor($length_of_profits/2);
	    $this->mid_point_A = $this->mid_point[$mid_point_index];
	    
	    // calculate value of d 
	    
	    foreach($this->mid_point as $mid){
	      $d = ($mid - $this->mid_point_A) /$this->class_intervel;
	      array_push($this->value_of_d,$d);
	    }
	    
	    // calculate value of value_of_fd
	    
	    $length_of_frequency = count($frequecy);
	    
	    for($i=0;$i<$length_of_frequency;$i++){
	      array_push($this->value_of_fd, $frequecy[$i] * $this->value_of_d[$i]);
	    }
	    
	    $this->total_fd_value = array_sum($this->value_of_fd);
	    
	    // calculate the fc 
	    
	    $cf = 0;
	    for($i=0;$i<$length_of_frequency;$i++){
	      $cf += $frequecy[$i];
	      array_push($this->cf,$cf);
	      
	    }
	  }
	  
	  function getProfit(){
	    $profits = $this->profits;
	     $count = count($profits);
  	    for($i =0; $i < $count; $i++){
  	     print_r($profits[$i]);
  	    }
	  }
	   function setProfit(array $profits){
	    $this->profits = $profits;
	   
	  }
	  
	  function getFrequency(){
	    $frequecy = $this->frequecy;
	    print_r($frequecy);
	  }
	   function setFrquency(array $frequecy){
	    $this->frequecy = $frequecy;
	  }
	 
    function getMidPoint(){
	    print_r ($this->mid_point);
	  }
	  
	  function getFrofiteFxValue(){
	    print_r($this->profites_fx);
	  }
	  
	  function getAverageProfite ($average_profite = 0){
	    $A = $this->mid_point_A;
	    $fd = $this->total_fd_value;
	    $n = $this->total_frequency;
	    $i = $this->class_intervel;
	    
	    $average_profite = round(($A + ($fd/$n) * $i),2);
	    
	    $this->average_profite = $average_profite;
	    
	    echo "The average profites is $average_profite" . "\n";
	    
	  }
	  function setMeClass($value,$array){
	    $data;
	    $count = count($array);
      for($i =0;$i<$count;$i++){
        if($value <= $array[$i]){
          $data['key'] = array_search($array[$i],$array);
          $data['value'] = $array[$i-1];
          $data['frequecy'] = $this->frequecy[0][$i];
          break;
        }
      }
      return $data;
	  }
	  function calculateMedian($data,$profits,$n){
	    $L = $profits[0][$data['key']][0];
	    $pcf = $data['value'];
	    $frequecy = $data['frequecy'];
	    $class_intervel = $this->class_intervel;
	    
	    
	    $meian =round(((($n -$pcf) / $frequecy) *200)+$L,2);
	    return $meian;
	  }
	  function getMidian(){
	    $n = $this->total_frequency /2;
	    $data = $this->setMeClass($n,$this->cf);
	    $midian = $this->calculateMedian($data,$this->profits,$n);
	    
	    echo "The Midian Value is $midian" ."\n";
	  }
	}
	
	$f1 = new StaticSticMatch(
	  array(
	      [200,400],
	      [400,600],
	      [600,800],
	      [800,1000],
	      [1000,1200],
	      [1200,1400],
	      [1400,1600],
	    ),
	    array(
	        500,
	        300,
	        280,
	        120,
	        100,
	        80,
	        20,
	      )
	  );
	  $f1->getMidian();;
;
?>
